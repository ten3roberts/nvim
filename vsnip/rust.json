{
  "fn": {
    "prefix": "fn",
    "body": [
      "fn ${1:name}(&self) -> ${4:RetType} {",
      "    ${5:todo!();}",
      "}"
    ],
    "description": "fn …(…) { … }"
  },
  "debug": {
    "prefix": "debug",
    "body": "log::debug!(\"${1}\");"
  },
  "info": {
    "prefix": "info",
    "body": "log::info!(\"${1}\");"
  },
  "warn": {
    "prefix": "warn",
    "body": "log::warn!(\"${1}\");"
  },
  "static_send_sync": {
    "prefix": "static",
    "body": "'static + Send + Sync "
  },
  "derive_copy": {
    "prefix": "copy",
    "body": "#[derive(Default, Debug, Clone, Copy, PartialEq)]"
  },
  "as_ref": {
    "prefix": "as_ref",
    "body": "let ${1} = ${1}.as_ref();"
  },
  "Default": {
    "prefix": "Default",
    "body": "Default::default()"
  },
  "collect_result": {
    "prefix": "collect_result",
    "body": "collect::<Result<Vec<_>>>()?"
  },
  "error": {
    "prefix": "error",
    "body": "#[error(${1})]\n${2}(${3}),"
  },
  "map_err": {
    "prefix": "map_err",
    "body": "map_err(|e| e.into())"
  },
  "LoadResource": {
    "prefix": [
      "LoadResource"
    ],
    "body": [
      "impl LoadResource for ${0} {",
      "    type Info = ${0}Info;",
      "",
      "    type Error = Error;",
      "",
      "    fn load(resources: &Resources, info: &Self::Info) -> Result<Self> {",
      "        ${1}",
      "    }",
      "}"
    ]
  },
  "timed_scope": {
    "prefix": [
      "timed_scope"
    ],
    "body": [
      "                let _scope =",
      "                    TimedScope::new(|elapsed| eprintln!(\"${1} took {:.3?}\", elapsed));"
    ]
  },
  "gizmo_line": {
    "prefix": [
      "gizmo_line"
    ],
    "body": [
      "                gizmos.push(Gizmo::Line {",
      "                    origin: ${1},",
      "                    color: ${2},",
      "                    dir: ${3},",
      "                    radius: todo${4},",
      "                    corner_radius: ${5},",
      "                });"
    ]
  },
  "pub_use": {
    "prefix": [
      "pubuse"
    ],
    "body": [
      "pub use ${1}::*;"
    ]
  },
  "builder": {
    "prefix": [
      "builder"
    ],
    "body": [
      "let mut builder = EntityBuilderClone::new();"
    ]
  },
  "cow": {
    "prefix": [
      "cow"
    ],
    "body": [
      "Cow<'static, str>"
    ]
  },
  "query_one": {
    "prefix": [
      "query_one"
    ],
    "body": [
      "let mut query = world.try_query_one::<${1}>(${2})?;"
    ]
  },
  "query": {
    "prefix": [
      "query_one"
    ],
    "body": [
      "let mut query = world.query::<${1}>()?;"
    ]
  },
  "..Default": {
    "prefix": [
      ".."
    ],
    "body": [
      "..Default::default()"
    ]
  },
  "new": {
    "prefix": [
      "fnnew"
    ],
    "body": [
      "pub fn new(${1}) -> Self {",
      "    ${2}",
      "}"
    ]
  },
  "doc_hidden": {
    "prefix": [
      "doc_hidden"
    ],
    "body": [
      "#[doc(hidden)]"
    ]
  },
  "common-derive": {
    "prefix": [
      "derives"
    ],
    "body": [
      "#[derive(Debug, Clone, PartialEq)]"
    ]
  },
  "struct": {
    "prefix": [
      "struct"
    ],
    "body": [
      "#[derive(Debug, Clone, PartialEq)]",
      "pub struct ${1} {",
      "    ${2}",
      "}"
    ]
  },
  "pod": {
    "prefix": [
      "pod"
    ],
    "body": [
      "#[derive(Debug, Clone, Copy, PartialEq, Pod, Zeroable)]",
      "#[repr(C)]"
    ]
  }
}
